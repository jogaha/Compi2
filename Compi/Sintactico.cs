using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static Compi.Lexico;
using static Compi.TablaSimbolos;

namespace Compi
{
	class Sintactico
	{
		public int[,] MR = new int[,]
		{
/*	0	*/	{1001,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},  //<B>					1000
/*	1	*/	{1006,  1002,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Programa>			1001
/*	2	*/	{1003,  1004,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Librerias>			1002
/*	3	*/	{1002,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<OtrasLibrerias>		1003
/*	4	*/	{-15 ,  1005,   -4  ,   -12 ,   -159,   -28 ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Libreria>			1004
/*	5	*/	{-4  ,  -3  ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Extension>			1005
/*	6	*/	{1007,  1008,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Clases>				1006
/*	7	*/	{1006,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<OtrasClases>			1007
/*	8	*/	{-26 ,  1013,   -25 ,   1012,   -4  ,   -108,   1011,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Clase>				1008
/*	9	*/	{-134,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Alcance>				1009
/*	10	*/	{-132,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	11	*/	{-133,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	12	*/	{-20 ,  -134,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Alcance2>			1010
/*	13	*/	{-20 ,  -132,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	14	*/	{-20 ,  -133,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	15	*/	{-157,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Abstract>			1011
/*	16	*/	{-4  ,  1009,    -20,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Herencia>			1012
/*	17	*/	{1013,  1014,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Miembros>			1013
/*	18	*/	{1018,  1015,   1010,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Miembro>				1014
/*	19	*/	{-26 ,  1029,   -25 ,   -24 ,   1019,   -23 ,   -4  ,   -154,   -999,   -999,   -999,   -999,   -999,   -999},	//<MetAtrib>			1015
/*	20	*/	{1016,  -4  ,   1022,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	21	*/	{-26 ,  -27 ,   1024,   -136,   1029,   -25 ,   -24 ,   1019,   -23 ,   -999,   -999,   -999,   -999,   -999},	//<MetAtrib2>			1016
/*	22	*/	{1017,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	23	*/	{1017,  -4  ,   -30 ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<TiposDeclaracion>	1017
/*	24	*/	{1017,  1023,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	25	*/	{-27 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	26	*/	{1018,  1015,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<MasMetAtrib>			1018
/*	27	*/	{1021,  1020,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Parametros>			1019
/*	28	*/	{-4  ,  1022,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Parametro>			1020
/*	29	*/	{1021,  1020,   -30 ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<MasParametros>		1021
/*	30	*/	{-127,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Tipo>				1022
/*	31	*/	{-126,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	32	*/	{-114,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	33	*/	{-120,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	34	*/	{-103,  1003,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	35	*/	{-160,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	36	*/	{-107,  1002,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	37	*/	{-137,  1003,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	38	*/	{1024,  -10 ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Asignacion>			1023
/*	39	*/	{1027,  1025,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Expresion>			1024
/*	40	*/	{1026,  -4  ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Factor>				1025
/*	41	*/	{-1  ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	42	*/	{-2  ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	43	*/	{-5  ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	44	*/	{-6  ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	45	*/	{-146,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	46	*/	{-119,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	47	*/	{1048,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Finvocar>			1026
/*	48	*/	{1024,  1028,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Termino>				1027
/*	49	*/	{-36 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Operador>			1028
/*	50	*/	{-33 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	51	*/	{-31 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	52	*/	{-39 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	53	*/	{-18 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	54	*/	{1029,  1030,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Sentencias>			1029
/*	55	*/	{1032,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Sentencia>			1030
/*	56	*/	{1039,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	57	*/	{1043,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	58	*/	{1044,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	59	*/	{-27 ,  1031,    -4 ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	60	*/	{1053,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	61	*/	{1056,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	62	*/	{1060,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	63	*/	{1061,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	64	*/	{1048,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<InvAsign>			1031
/*	65	*/	{1023,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	66	*/	{1038,  -26 ,   1029,   -25 ,   -24 ,   1033,   -23 ,   -124,   -999,   -999,   -999,   -999,   -999,   -999},	//<IF>					1032
/*	67	*/	{1035,  1034,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Condicionales>		1033
/*	68	*/	{1024,  1036,   1024,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Condicional>			1034
/*	69	*/	{1035,  1034,   1037,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<MasCondicionales>	1035
/*	70	*/	{-11 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<OpRel>				1036
/*	71	*/	{-9  ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	72	*/	{-12 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	73	*/	{-15 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	74	*/	{-13 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	75	*/	{-16 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	76	*/	{-8  ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<OpLogic>				1037
/*	77	*/	{-7  ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	78	*/	{1067,  -115,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<ELSE>				1038
/*	79	*/	{-26 ,  1029,   -25 ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},  //<ELSE2>				1067
/*	80	*/	{-26 ,  1029,   -25 ,   -24 ,   1041,   -4  ,   -27 ,   1033,   -27 ,   1040,   -23 ,   -121,   -999,   -999},	//<FOR>					1039
/*	81	*/	{1023,  -4  ,   -126,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<FOR2>				1040
/*	82	*/	{1041,  -4  ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	83	*/	{1024,  1042,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<ReAsignacion>		1041
/*	84	*/	{1023,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	85	*/	{-38 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	86	*/	{-35 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	87	*/	{-37 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<OpAsignacion>		1042
/*	88	*/	{-34 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	89	*/	{-40 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	90	*/	{-19 ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	91	*/	{-26 ,  1029,   -25 ,   -24 ,   1033,   -23 ,   -156,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<WHILE>				1043
/*	92	*/	{1047,  1045,   -26 ,   1029,   -25 ,   -147,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<TRY>					1044
/*	93	*/	{1046,  -26 ,   1029,   -25 ,   -24 ,   -4  ,   -4  ,   -23 ,   -106,   -999,   -999,   -999,   -999,   -999},	//<Catch>				1045
/*	94	*/	{1045,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Catch2>				1046
/*	95	*/	{-26 ,  1029,   -25 ,   -164,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Finally>				1047
/*	96	*/	{-24 ,  1050,   -23 ,   1049,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Invocar>				1048
/*	97	*/	{-4  ,  -3  ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<MetInvocar>			1049
/*	98	*/	{1052,  1051,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Valores>				1050
/*	99	*/	{1024,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Valor>				1051
/*	100	*/	{1052,  1051,   -30 ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<MasValores>			1052
/*	101	*/	{1054,  1010,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Declaracion>			1053
/*	102	*/	{1055,  1017,   -4  ,   1022,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<DecR>				1054
/*	103	*/	{1054,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Ciclo>				1055
/*	104	*/	{-27 ,  -163,   1059,   1057,   -158,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Escribir>			1056
/*	105	*/	{-14 ,  1058,   -14 ,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Imprimir>			1057
/*	106	*/	{-4  ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Imprimir2>			1058
/*	107	*/	{-5  ,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},
/*	108	*/	{1057,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<MasImprimir>			1059
/*	109	*/	{-27 ,  -4  ,   -17 ,   -165,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Leer>				1060
/*	110	*/	{-26 ,  1064,   1062,   -25 ,   -24 ,   -4  ,   -23 ,   -142,   -999,   -999,   -999,   -999,   -999,   -999},	//<Switch				1061
/*	111	*/	{1064,  1063,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Cases>				1062
/*	112	*/	{1066,  1030,   -20 ,   -4  ,   -105,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Case>				1063
/*	113	*/	{1062,  -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<MasCases>			1064
/*	114	*/	{1066,  -111,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Default>				1065
/*	115	*/	{-27 ,  -104,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<Break>				1066
/*	116	*/	{-26 ,  1029,   -25 ,   -24 ,   1019,   -23 ,   -4  ,   -999,   -999,   -999,   -999,   -999,   -999,   -999},	//<MetAtrib>			1015
/*	117	*/	{1032 , -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999,   -999},  //<ELSE2>				1067
		};

		int[,] MTS = new int[,]
		{	
										//Notas adicionales:	-450 representa un error sintáctico
										//						-76 representa el valor λ
										/*	||		0	||		1		||	2	||	3		||		4	||		5		||	6	||	7		||	8	||	9	||	10	||	11	||	12	||	13	||	14	||	15	||	16	||	17	||	18	||	19	||	20	||	21	||	22	||	23	||	24	||	25	||	26	||	27	||	28	||	29	||	30	||	31	||	32	||	33	||	34	||	35	||	36	||	37	||	38	||	39	||	40	||		41	||		42	||		43	||		44	||		45	||		46	||		47	||		48	||		49		||		50	||		51	||	52	||		53	||		54	||		55	||		56		||		57	||		58	||		59	||	60	||		61	||		62	||	63	||		64	||	65	||		66	||		67	||		68		||	69	||		70		||		71	||		72		||		73	||		74		||		75	||		76	||		77	||		78	||		79	||		80	||		81	||		82		||		83	||		84	||		85	||		86	||		87	||		88	||		89	||		90		||		91	||		92	||		93	||		94		||		95	||		96		||		97	||		98	||		99			100		||		101	||		102	||		103	||	104	||		105	||*/
										/*	||	Enteros	||	Decimales	||	.	||	ID's	||	Cadena	||	Caracter	||	&&	||	'||'	||	!=	||	=	||	==	||	<	||	<=	||	<<	||	>	||	>=	||	>>	||	%	||	%=	||	:	||	#	||	##	||	[	||	]	||	(	||	)	||	{	||	}	||	;	||	,	||	*	||	*=	||	-	||	-=	||	--	||	+	||	+=	||	++	||	/	||	/=	||	asm	||	auto	||	bool	||	break	||	case	||	catch	||	char	||	class	||	const	||	continue	||	default	||	delete	||	do	||	double	||	else	||	enum	||	explicit	||	extern	||	false	||	float	||	for	||	friend	||	goto	||	if	||	inline	||	int	||	long	||	mutable	||	namespace	||	new	||	operator	||	private	||	protected	||	public	||	register	||	return	||	short	||	signed	||	sizeof	||	static	||	struc	||	switch	||	template	||	this	||	throw	||	true	||	try		||	typedef	||	typename||	union	||	unsigned	||	using	||	virtual	||	void	||	volatile	||	while	||	abstract	||	cout	||	include	||	string	||	iostream	||	mathe	||	endl	||	finally	||	cin	||	LEOF	||*/
										/*	||	-1		||		-2		||	-3	||	-4		||	-5		||		-6		||	-7	||	-8		||	-9	||	-10	||	-11	||	-12	||	-13	||	-14	||	-15	||	-16	||	-17	||	-18	||	-19	||	-20	||	-28	||	-29	||	-21	||	-22	||	-23	||	-24	||	-25	||	-26	||	-27	||	-30	||	-31	||	-32	||	-33	||	-34	||	-35	||	-36	||	-37	||	-38	||	-39	||	-40	||-101	||	-102	||	-103	||	-104	||	-105	||	-106	||	-107	||	-108	||	-109	||	-110		||	-111	||	-112	||-113	||	-114	||	-115	||	-116	||	-117		||	-118	||	-119	||	-120	|| -121	||	-122	||	-123	|| -124	||	-125	||-126	||	-127	||	-128	||	-129		|| -130	||	-131		||	-132	||	-133		||	-134	||	-135		||	-136	||	-137	||	-138	||	-139	||	-140	||	-141	||	-142	||	-143		||	-144	||	-145	||	-146	||-147		||	-148	||	-149	||	-150	||	-151		||	-152	||	-153	||	-154	||	-155		||	-156	||	-157		||	-158	||	-159	||	-160	||	-161		||	-162	||	-163	||	-164	|| -165	||			||*/
/*0		<B>					= 1000*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,     0 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*1		<Program>			= 1001*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,     1 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*2		<Librerias>			= 1002*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,     2 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*3		<OtrasLibrerias>	= 1003*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,     3 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*4		<Libreria>			= 1004*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,     4 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },		
/*5		<Extension>			= 1005*/		{    -76    ,        -76    ,     5 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,  - 76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*6		<Clases>			= 1006*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,      6    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,      6        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*7		<OtrasClases>		= 1007*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,  -450 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,      7    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,      7        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*8		<Clase>				= 1008*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,      8    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,     8         ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*9		<Alcance>			= 1009*/		{},
/*10	<Alcance2>			= 1010*/		{},
/*11	<Abstract>			= 1011*/		{},
/*12	<Herencia>			= 1012*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    16 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*13	<Miembros>			= 1013*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,     17    ,    -76    ,    -76    ,    -76    ,     17    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,     17    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,     17    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,    17 ,     17    ,    -76    ,    -76        ,   -76 ,    -76        ,     17    ,     17        ,     17    ,    -76        ,    -76    ,     17    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,     17    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,     17    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*14	<Miembro>			= 1014*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,     18    ,   -450    ,   -450    ,   -450    ,     18    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,     18    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     18    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,    18 ,     18    ,   -450    ,   -450        ,  -450 ,   -450        ,     18    ,     18        ,     18    ,   -450        ,   -450    ,     18    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     18    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,     18    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*15	<MetAtrib>			= 1015*/		{   -450    ,       -450    ,  -450 ,   116     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,     20    ,   -450    ,   -450    ,   -450    ,     20    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,     20    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     20    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,    20 ,     20    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,     20    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     19    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,     20    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*16	<MetAtrib2>			= 1016*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,    22 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    21 ,  -450 ,  -450 ,  -450 ,    22 ,    22 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*17	<TiposDeclaracion>	= 1017*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,    24 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    25 ,    23 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*18	<MasMetAtrib>		= 1018*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,     26    ,    -76    ,    -76    ,    -76    ,     26    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,     26    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,     26    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,    26 ,     26    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,     26    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,     26    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,     26    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*19	<Parametros>		= 1019*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,     27    ,    -76    ,    -76    ,    -76    ,     27    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,     27    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,     27    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,    27 ,     27    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,     27    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,     27    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*20	<Parametro>			= 1020*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,     28    ,   -450    ,   -450    ,   -450    ,     28    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,     28    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     28    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,    28 ,     28    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,     28    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,     28    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*21	<MasParametros>		= 1021*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    29 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*22	<Tipo>				= 1022*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,     34    ,   -450    ,   -450    ,   -450    ,     36    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,     32    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     33    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,    31 ,     30    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,     37    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,     35    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*23	<Asignacion>		= 1023*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,    38 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*24	<Expresion>			= 1024*/		{     39    ,         39    ,  -450 ,    39     ,     39    ,         39    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,     39    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     39    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*25	<Factor>			= 1025*/		{     41    ,         42    ,  -450 ,    40     ,     43    ,         44    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,     46    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     45    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*26	<Finvocar>			= 1026*/		{    -76    ,        -76    ,    47 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    47 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*27	<Termino>			= 1027*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    48 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    48 ,   -76 ,    48 ,   -76 ,   -76 ,    48 ,   -76 ,   -76 ,    48 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*28	<Operador>			= 1028*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    53 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    51 ,  -450 ,    50 ,  -450 ,  -450 ,    49 ,  -450 ,  -450 ,    52 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
										/*	||		0	||		1		||	2	||	3		||		4	||		5		||	6	||	7		||	8	||	9	||	10	||	11	||	12	||	13	||	14	||	15	||	16	||	17	||	18	||	19	||	20	||	21	||	22	||	23	||	24	||	25	||	26	||	27	||	28	||	29	||	30	||	31	||	32	||	33	||	34	||	35	||	36	||	37	||	38	||	39	||	40	||		41	||		42	||		43	||		44	||		45	||		46	||		47	||		48	||		49		||		50	||		51	||	52	||		53	||		54	||		55	||		56		||		57	||		58	||		59	||	60	||		61	||		62	||	63	||		64	||	65	||		66	||		67	||		68		||	69	||		70		||		71	||		72		||		73	||		74		||		75	||		76	||		77	||		78	||		79	||		80	||		81	||		82		||		83	||		84	||		85	||	86	||		87	||		88		||		89	||		90		||		91	||		92	||		93	||		94		||		95	||		96		||		97	||		98	||		99			100		||		101	||		102	||		103	||	104	||		105	||*/
										/*	||	Enteros	||	Decimales	||	.	||	ID's	||	Cadena	||	Caracter	||	&&	||	'||'	||	!=	||	=	||	==	||	<	||	<=	||	<<	||	>	||	>=	||	>>	||	%	||	%=	||	:	||	#	||	##	||	[	||	]	||	(	||	)	||	{	||	}	||	;	||	,	||	*	||	*=	||	-	||	-=	||	--	||	+	||	+=	||	++	||	/	||	/=	||	asm	||	auto	||	bool	||	break	||	case	||	catch	||	char	||	class	||	const	||	continue	||	default	||	delete	||	do	||	double	||	else	||	enum	||	explicit	||	extern	||	false	||	float	||	for	||	friend	||	goto	||	if	||	inline	||	int	||	long	||	mutable	||	namespace	||	new	||	operator	||	private	||	protected	||	public	||	register	||	return	||	short	||	signed	||	sizeof	||	static	||	struc	||	switch	||	template	||	this	||	throw	||	true	||	try	||	typedef	||	typename	||	union	||	unsigned	||	using	||	virtual	||	void	||	volatile	||	while	||	abstract	||	cout	||	include	||	string	||	iostream	||	mathe	||	endl	||	finally	||	cin	||	LEOF	||*/
										/*	||	-1		||		-2		||	-3	||	-4		||	-5		||		-6		||	-7	||	-8		||	-9	||	-10	||	-11	||	-12	||	-13	||	-14	||	-15	||	-16	||	-17	||	-18	||	-19	||	-20	||	-28	||	-29	||	-21	||	-22	||	-23	||	-24	||	-25	||	-26	||	-27	||	-30	||	-31	||	-32	||	-33	||	-34	||	-35	||	-36	||	-37	||	-38	||	-39	||	-40	||-101	||	-102	||	-103	||	-104	||	-105	||	-106	||	-107	||	-108	||	-109	||	-110		||	-111	||	-112	||-113	||	-114	||	-115	||	-116	||	-117		||	-118	||	-119	||	-120	|| -121	||	-122	||	-123	|| -124	||	-125	||-126	||	-127	||	-128	||	-129		|| -130	||	-131		||	-132	||	-133		||	-134	||	-135		||	-136	||	-137	||	-138	||	-139	||	-140	||	-141	||	-142	||	-143		||	-144	||	-145	||	-146	||-147	||	-148	||	-149		||	-150	||	-151		||	-152	||	-153	||	-154	||	-155		||	-156	||	-157		||	-158	||	-159	||	-160	||	-161		||	-162	||	-163	||	-164	|| -165	||			||*/
/*29	<Sentencias>		= 1029*/		{    -76    ,        -76    ,   -76 ,    54     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,     54    ,    -76    ,    -76    ,    -76    ,     54    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,     54    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,     54    ,    54 ,    -76    ,    -76    ,    54 ,    -76    ,    54 ,     54    ,    -76    ,    -76        ,   -76 ,    -76        ,     54    ,     54        ,     54    ,    -76        ,    -76    ,     54    ,    -76    ,    -76    ,    -76    ,    -76    ,     54    ,    -76        ,    -76    ,    -76    ,    -76    ,     54    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,     54    ,    -76        ,     54    ,    -76    ,     54    ,    -76        ,    -76    ,    -76    ,    -76    ,    54 ,    -76    },
/*30	<Sentencia>			= 1030*/		{   -450    ,       -450    ,  -450 ,    59     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,     60    ,   -450    ,   -450    ,   -450    ,     60    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,     60    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     60    ,    56 ,   -450    ,   -450    ,    55 ,   -450    ,    60 ,     60    ,   -450    ,   -450        ,  -450 ,   -450        ,     60    ,     60        ,     60    ,   -450        ,   -450    ,     60    ,   -450    ,   -450    ,   -450    ,   -450    ,     63    ,   -450        ,   -450    ,   -450    ,   -450    ,     58    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,     57    ,   -450        ,     61    ,   -450    ,     60    ,   -450        ,   -450    ,   -450    ,   -450    ,    62 ,   -450    },
/*31	<InvAsign>			= 1031*/		{   -450    ,       -450    ,    64 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,    65 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   64  ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*32	<IF>				= 1032*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,    66 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*33	<Condicionales>		= 1033*/		{     67    ,         67    ,  -450 ,    67     ,     67    ,         67    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,     67    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     67    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*34	<Condicional>		= 1034*/		{     68    ,         68    ,  -450 ,    68     ,     68    ,         68    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,     68    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     68    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*35	<MasCondicionales>	= 1035*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,    69 ,     69    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*36	<OpRel>				= 1036*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,    71 ,  -450 ,    70 ,    72 ,    74 ,  -450 ,    73 ,    75 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*37	<OpLogic>			= 1037*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,    77 ,     76    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*38	<ELSE>				= 1038*/		{},
/*39	<FOR>				= 1039*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,    80 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*40	<FOR2>				= 1040*/		{   -450    ,       -450    ,  -450 ,    82     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,    81 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*41	<ReAsignacion>		= 1041*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,    84 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    83 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    83 ,    86 ,  -450 ,    83 ,    85 ,  -450 ,    83 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*42	<OpAsignacion>		= 1042*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    90 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    88 ,  -450 ,  -450 ,    87 ,  -450 ,  -450 ,    89 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*43	<WHILE>				= 1043*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,     91    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*44	<TRY>				= 1044*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,     92    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*45	<Catch>				= 1045*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,     93    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*46	<Catch2>			= 1046*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,     94    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*47	<Finally>			= 1047*/		{},
/*48	<Invocar>			= 1048*/		{   -450    ,       -450    ,    96 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    96 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*49	<MetInvocar>		= 1049*/		{    -76    ,        -76    ,    97 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*50	<Valores>			= 1050*/		{     98    ,         98    ,   -76 ,    98     ,     98    ,         98    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,     98    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,     98    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*51	<Valor>				= 1051*/		{     99    ,         99    ,  -450 ,    99     ,     99    ,         99    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,     99    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,     99    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*52	<MasValores>		= 1052*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   100 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*53	<Declaracion>		= 1053*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,    101    ,   -450    ,   -450    ,   -450    ,    101    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,    101    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,    101    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,   101 ,    101    ,   -450    ,   -450        ,  -450 ,   -450        ,    101    ,    101        ,    101    ,   -450        ,   -450    ,    101    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,    101    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*54	<DecR>				= 1054*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,    102    ,   -450    ,   -450    ,   -450    ,    102    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,    102    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,    102    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,   102 ,    102    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,    102    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,    102    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*55	<Ciclo>				= 1055*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    103    ,    -76    ,    -76    ,    -76    ,    103    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    103    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    103    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   103 ,    103    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    103    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    103    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*56	<Escribir>			= 1056*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,    104    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*57	<Imprimir>			= 1057*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   105 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*58	<Imprimir2>			= 1058*/		{   -450    ,       -450    ,  -450 ,   106     ,    107    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*59	<MasImprimir>		= 1059*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   108 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*60	<Leer>				= 1060*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   105 ,   -450    },
										/*	||		0	||		1		||	2	||	3		||		4	||		5		||	6	||	7		||	8	||	9	||	10	||	11	||	12	||	13	||	14	||	15	||	16	||	17	||	18	||	19	||	20	||	21	||	22	||	23	||	24	||	25	||	26	||	27	||	28	||	29	||	30	||	31	||	32	||	33	||	34	||	35	||	36	||	37	||	38	||	39	||	40	||		41	||		42	||		43	||		44	||		45	||		46	||		47	||		48	||		49		||		50	||		51	||	52	||		53	||		54	||		55	||		56		||		57	||		58	||		59	||	60	||		61	||		62	||	63	||		64	||	65	||		66	||		67	||		68		||	69	||		70		||		71	||		72		||		73	||		74		||		75	||		76	||		77	||		78	||		79	||		80	||		81	||		82		||		83	||		84	||		85	||	86	||		87	||		88		||		89	||		90		||		91	||		92	||		93	||		94		||		95	||		96		||		97	||		98	||		99			100		||		101	||		102	||		103	||	104	||		105	||*/
										/*	||	Enteros	||	Decimales	||	.	||	ID's	||	Cadena	||	Caracter	||	&&	||	'||'	||	!=	||	=	||	==	||	<	||	<=	||	<<	||	>	||	>=	||	>>	||	%	||	%=	||	:	||	#	||	##	||	[	||	]	||	(	||	)	||	{	||	}	||	;	||	,	||	*	||	*=	||	-	||	-=	||	--	||	+	||	+=	||	++	||	/	||	/=	||	asm	||	auto	||	bool	||	break	||	case	||	catch	||	char	||	class	||	const	||	continue	||	default	||	delete	||	do	||	double	||	else	||	enum	||	explicit	||	extern	||	false	||	float	||	for	||	friend	||	goto	||	if	||	inline	||	int	||	long	||	mutable	||	namespace	||	new	||	operator	||	private	||	protected	||	public	||	register	||	return	||	short	||	signed	||	sizeof	||	static	||	struc	||	switch	||	template	||	this	||	throw	||	true	||	try	||	typedef	||	typename	||	union	||	unsigned	||	using	||	virtual	||	void	||	volatile	||	while	||	abstract	||	cout	||	include	||	string	||	iostream	||	mathe	||	endl	||	finally	||	cin	||	LEOF	||*/
										/*	||	-1		||		-2		||	-3	||	-4		||	-5		||		-6		||	-7	||	-8		||	-9	||	-10	||	-11	||	-12	||	-13	||	-14	||	-15	||	-16	||	-17	||	-18	||	-19	||	-20	||	-28	||	-29	||	-21	||	-22	||	-23	||	-24	||	-25	||	-26	||	-27	||	-30	||	-31	||	-32	||	-33	||	-34	||	-35	||	-36	||	-37	||	-38	||	-39	||	-40	||-101	||	-102	||	-103	||	-104	||	-105	||	-106	||	-107	||	-108	||	-109	||	-110		||	-111	||	-112	||-113	||	-114	||	-115	||	-116	||	-117		||	-118	||	-119	||	-120	|| -121	||	-122	||	-123	|| -124	||	-125	||-126	||	-127	||	-128	||	-129		|| -130	||	-131		||	-132	||	-133		||	-134	||	-135		||	-136	||	-137	||	-138	||	-139	||	-140	||	-141	||	-142	||	-143		||	-144	||	-145	||	-146	||-147	||	-148	||	-149		||	-150	||	-151		||	-152	||	-153	||	-154	||	-155		||	-156	||	-157		||	-158	||	-159	||	-160	||	-161		||	-162	||	-163	||	-164	|| -165	||			||*/
/*61	<Switch>			= 1061*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,    110    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*62	<Cases>				= 1062*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,    111    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*63	<Case>				= 1063*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,    112    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,  -450 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },
/*64	<MasCases>			= 1064*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    113    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*65	<Default>			= 1065*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    114    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*66	<Break>				= 1066*/		{    -76    ,        -76    ,   -76 ,   -76     ,    -76    ,        -76    ,   -76 ,    -76    ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,   -76 ,    -76    ,    -76    ,    115    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    ,    -76    ,   -76 ,    -76    ,   -76 ,    -76    ,    -76    ,    -76        ,   -76 ,    -76        ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,    -76        ,    -76    ,    -76    ,    -76    ,   -76 ,    -76    },
/*67	<ELSE2>				= 1067*/		{   -450    ,       -450    ,  -450 ,  -450     ,   -450    ,       -450    ,  -450 ,   -450    ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,    79 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,  -450 ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    ,   -450    ,   117 ,   -450    ,  -450 ,   -450    ,   -450    ,   -450        ,  -450 ,   -450        ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,   -450        ,   -450    ,   -450    ,   -450    ,  -450 ,   -450    },

		};
		bool Seguir;
		bool HuboErrores;
		public TablaSimbolos ts = new TablaSimbolos();
		public string claseActiva;
		public string metodoActivo;
		List<Token> ListaToken;
		public List<int> ListaReglas;
		List<int> MisReglas;
		int Cola;
		int Columna, Renglon;
		int Regla;
		string retorno;
		public List<Error> ErroresSintacticos = new List<Error>();
		int reglaActual;
		int filaActual;
		public string[] Ejecutar(List<Token> ListaToken)
		{
			retorno = "";
			HuboErrores = false;
			Seguir = true;
			this.ListaToken = ListaToken;
			MisReglas = new List<int>();
			//ListaReglas = new List<int>();
			var result = new string[2];

			if (ListaToken.Count > 0)
				ListaToken.Add(new Token(-80, ListaToken[ListaToken.Count - 1].linea, Convert.ToString((char)165))); //Agregamos LEOF ¥
			else
				ListaToken.Add(new Token(-80, 0, Convert.ToString((char)165))); //Agregamos LEOF ¥

			MisReglas.Add(-80); //Agregamos LEOF ¥
			MisReglas.Add(1000);//Agregamos la regla de inicio <B>
			Cola = 0;

			result[0] = retorno;
			result[1] = "OK";

			do
			{

				if (ListaToken[Cola].estado != MisReglas[MisReglas.Count - 1])
				{
					if (MisReglas.Last() < 1000)
					{
						HuboErrores = true;
						ManejarError(MisReglas.Last(), ListaToken[Cola].linea);
						result[0] = "Ocurrieron errores";
						result[1] = "ERROR";
						//recorremos un paso atras la lista e igualo al token esperado para continuar con la lectura sin interupciones en los estados
						Cola =  Cola-2;
						ListaToken[Cola].estado = MisReglas.Last();
						//reiniciamos el loop con los nuevos parametros
						continue;
					}
					Columna = BuscarColumna(ListaToken[Cola].estado);
					Renglon = BuscarRenglon(MisReglas[MisReglas.Count - 1]);
					Regla = MTS[Renglon, Columna];
					int reglaBnf = Renglon + 1000;
					if (Regla > -400)
					{
						if (Regla == -76)
						{
							MisReglas.RemoveAt(MisReglas.Count - 1);
                            switch (reglaBnf)
                            {
								case 1011:
                                    if (reglaActual == 1008)
                                    {
                                        for (int i = 0; i < ListaReglas.Count; i++)
                                        {
												if (ListaReglas[i] == reglaBnf)
												{
													ListaReglas.Remove(ListaReglas[i]);
												}											
										}
									}
									break;
								default:
                                    break;
                            }

                        }
						else
						{
							InsertarRegla(Regla);
                            
                        }
					}
					else
					{
						if (ListaToken[Cola].estado == -80)
						{
							HuboErrores = true;
							ManejarError(MisReglas.Last(), ListaToken[Cola].linea);
							result[0] = "Ocurrieron errores";
							result[1] = "ERROR";
							MisReglas.RemoveAt(MisReglas.Count - 1);
						}
						else
						{
							HuboErrores = true;
							ManejarError(MisReglas.Last(), ListaToken[Cola].linea);
							result[0] = "Ocurrieron errores";
							result[1] = "ERROR";
							MisReglas.RemoveAt(MisReglas.Count - 1);
							Cola++;
						}

					}
				}
				else
				{
					if (ListaToken[Cola].estado == -80)
					{
						Seguir = false;
					}
					Cola++;
					MisReglas.RemoveAt(MisReglas.Count - 1);
				}

			} while (Seguir == true);

			if (!HuboErrores)
			{
				insertarTS(ListaToken);
				result[0] = "Analisis Sintactico Finalizado sin errores";
			}



			return result;
		}
		public Boolean insertarTS(List<Token> ListaToken) 
		{
			List<NodoClase> listaClases = new List<NodoClase>();
			NodoClase nuevaClase = new NodoClase();

			for (int i = 0; i <= ListaToken.Count - 1; i++)
			{
				//cuando llega la clase
				if (ListaToken[i].lexema == "class")
				{
					nuevaClase = new NodoClase();							//Crea el nodo para la clase
					nuevaClase.RenglonDeDeclaracion = ListaToken[i].linea;	//Pasar la linea de declaracion de la clase
					nuevaClase.Lexema = ListaToken[i + 1].lexema;           //Pasar el lexema de la clase al nodo
					claseActiva = ListaToken[i + 1].lexema;                 //Guardar el lexeman de la clase activa

					//Herencia
					if (ListaToken[i + 2].lexema == ":")
					{
						Boolean existeSuperClase = ts.ExisteClaseHeredada(ListaToken[i + 3].lexema);
						if (existeSuperClase)
						{
							nuevaClase.Herencia = encontrarClase(listaClases, ListaToken[i + 3].lexema);
						}
						else
						{
							//error semantico de Herencia no se encontro la superclase
							//return false
						}

					}

					//sumar i hasta despues de definicion de clase
					int bracket = 0;
					if (ListaToken[i + 2].lexema == "{")
					{
						bracket = i + 2;
					}
					else if (ListaToken[i + 4].lexema == "{")
					{
						bracket = i + 4;
					}
					i = bracket + 1;

					//insertar clase en lista

					Estado estadoClase = ts.InsertarNodoClase(nuevaClase);
					if (estadoClase == Estado.Insertado)
					{
						listaClases.Add(nuevaClase);
					}
					else if (estadoClase == Estado.Duplicado)
					{
						//Error Semantico clase actual duplicada
						//retunr flase
					}
					Boolean terminacionClase = false;
					while (!terminacionClase)
					{
						//insertar atributo
						if (ListaToken[i].estado == -4 && ListaToken[i + 1].lexema != "(")
						{
							NodoAtributo nuevoAtributo = new NodoAtributo();
							nuevoAtributo.Lexema = ListaToken[i].lexema;
							nuevoAtributo.MiTipo = this.conversionLexemaTipo(ListaToken[i - 1].lexema);
							if (new[] {-132,-133,-134 }.Contains(ListaToken[i - 3].estado))
							{
								nuevoAtributo.MiAlcance = conversionoLexemaAlcance(ListaToken[i - 2].lexema);
							}
							else
							{
								nuevoAtributo.MiAlcance = Alcance.Private;
							}
							Estado estadoNodoAtributo = ts.InsertarNodoAtributo(nuevoAtributo, nuevaClase);
							if (estadoNodoAtributo == Estado.Duplicado)
							{
								//Error Semantico el atributo actual esta duplicado
								//return false
							}
							else if (estadoNodoAtributo == Estado.DuplicadoAtributoConClase)
							{
								//Error Semantico el atributo actual tiene el mismo nombre de la clase
								//return false
							}
							if (ListaToken[i + 1].lexema == "=")
							{
								nuevoAtributo.Valor = ListaToken[i + 2].lexema;
								int puntoYcoma = i + 3;
								i = puntoYcoma + 1;
							}
							else
							{
								int puntoYcoma = i + 1;
								i = puntoYcoma;
							}
						}
						if (ListaToken[i + 1].lexema == "}")
						{
							break;
						}

						//Insertar metodo
						//Entra con palabra reservda para el tipo del metodo
						if ((new[] { -103, -107, -120, -126, -160, -154 }.Contains(ListaToken[i].estado) && ListaToken[i + 1].estado == -4 && ListaToken[i + 2].lexema == "(") || (ListaToken[i].estado == -4 && ListaToken[i + 1].lexema == "(") )
						{
							string nombreMetodo = "";
							while (ListaToken[i].lexema != "{")
							{
								i++;
							}
							Boolean terminacionMetodo = false;
							while (!terminacionMetodo)
							{
								int inicioDefinicionMetodo = 0;
								if (ListaToken[i].lexema == "{")
								{
									inicioDefinicionMetodo = i;
									int iTemporal = i;
									while (ListaToken[iTemporal].lexema != "(")
									{
										iTemporal--;
									}
									NodoMetodo nuevoMetodo = new NodoMetodo();

									nombreMetodo = ListaToken[iTemporal - 1].lexema;
									nuevoMetodo.Lexema = ListaToken[iTemporal - 1].lexema;
									metodoActivo = ListaToken[iTemporal - 1].lexema;
									nuevoMetodo.MiRegreso = conversionLexemaRegreso(ListaToken[iTemporal - 2].lexema);

									if (new[] { -132, -133, -134 }.Contains(ListaToken[iTemporal - 4].estado))
									{
										nuevoMetodo.MiAlcance = conversionoLexemaAlcance(ListaToken[iTemporal - 4].lexema);
									}
									else if (new[] { -132, -133, -134 }.Contains(ListaToken[iTemporal - 3].estado))
									{
										nuevoMetodo.MiAlcance = conversionoLexemaAlcance(ListaToken[iTemporal - 3].lexema);
									}

									//Se mueve el puntero al inicio de la definicion de parametros
									i = iTemporal + 1;

									//insertar parametros
									List<NodoVariables> listaVariables = new List<NodoVariables>();
									while (ListaToken[i].lexema != ")")
									{
										NodoVariables nuevaVariable = new NodoVariables();
										nuevaVariable.MiTipo = conversionLexemaTipo(ListaToken[i].lexema);
										i += 1;
										nuevaVariable.Lexema = ListaToken[i].lexema;
										listaVariables.Add(nuevaVariable);
										if (ListaToken[i + 1].lexema == ",")
										{
											i += 2;
										}
										else
										{
											i++;
										}

									}

									// Insertar nodo varaible en nodo metodo
									var metodo = ts.InsertarNodoMetodo(nuevoMetodo, listaVariables, nuevaClase);
									if (metodo.Item1 == Estado.DuplicadoVariableMetodo)
									{
										//Error Semantico Parametro duplicado con el metodo "nuevoMetodo.Lexema" y tomar la linea
										//return false;
									}
									else if (metodo.Item1 == Estado.Duplicado)
									{
										//Error Semantico Metodo duplicado "nuevoMetodo.Lexema" y tomar linea
										//return false;
									}
									else if (metodo.Item1 == Estado.DuplicadoMetodoConClase)
									{
										//Error semantico metodo "nuevoMetodo.Lexema" duplicado con nombre de clase, tomar linea
										//return false;
									}
									nombreMetodo = metodo.Item2;
									//Se mueve el index despues de cuerpo de clase: "{" + 1
									i = inicioDefinicionMetodo + 1;

								}

								//insertar variables de metodo
								if (ListaToken[i].estado == -4)
								{
									NodoVariables nuevaVariable = new NodoVariables();
									//Se define la variable
									if (new[] { -103, -107, -120, -126, -160}.Contains(ListaToken[i - 1].estado))
									{
										nuevaVariable.MiTipo = conversionLexemaTipo(ListaToken[i - 1].lexema);
										nuevaVariable.Lexema = ListaToken[i].lexema;
										if (ListaToken[i + 1].lexema == "=")
										{
											int iTemp = i;
											while (ListaToken[iTemp].lexema != ";")
											{
												iTemp++;
											}

											List<Token> miListaTemporal = ListaToken.GetRange(i, iTemp - (i - 1));

											Estado estadoMetodo = ts.InsertarNodoVariable(nuevaVariable, nuevaClase, nombreMetodo);
											if (estadoMetodo == Estado.DuplicadoVariableMetodo)
											{
												//Error semantico variable duplicada en metodo "ListaToken[i].lexema" tomar la linea
												//return false;
											}
											else if (estadoMetodo == Estado.Duplicado)
											{
												//Error semantico variable diplicada "ListaToken[i].lexema" tomar la linea
												//return false;
											}
										}
										else if (ListaToken[i + 1].lexema == ";")
										{
											List<Token> miListaTemporal = ListaToken.GetRange(i - 1, 3);

										}
									}

									//uso de variable definida en parametros
									else if (ListaToken[i + 1 ].lexema != "(")
									{
										//Encontrar variable mencionada
										Boolean existeVariable = ts.ExisteNodoVariable(nuevaClase, nombreMetodo, ListaToken[i].lexema);
										if (existeVariable)
										{
											if (ListaToken[i + 1].lexema == "=")
											{
												if (ListaToken[i + 2].estado == -5)
												{
													nuevaVariable.Valor = ListaToken[i + 2].lexema;
												}
												else
												{
													int iTemp = i + 2;
													while (ListaToken[iTemp].lexema != ";")
													{
														if (ListaToken[iTemp].estado == -4)
														{
															Boolean existeVar = ts.ExisteNodoVariable(nuevaClase, nombreMetodo, ListaToken[iTemp].lexema);
															if (!existeVar)
															{
																//Error Semantico la variable ListaToken[iTemporal].Lexema no ha sido previamente definida. tomar la linea
																//return false;
															}
														}
														else if (ListaToken[iTemp].estado == -1 || ListaToken[iTemp].estado == -2)
														{
															nuevaVariable.Valor = ListaToken[iTemp].lexema;
														}
														iTemp++;
													}
													i = iTemp;
												}
												
											}
										}
										else
										{
											//Error Semantico la variable ListaToken[i].Lexema no ha sido previamente definida. tomar la linea
											//return false;
										}
									}
									//invocacion del metodo
									else if (ListaToken[i + 1].estado != -5)
									{
										List<string> listaArgumentos = new List<string>();
										int iTemporal = i + 2;
										while (ListaToken[iTemporal].lexema != ")")
										{
											if (new[] { -4, -1, -2 }.Contains(ListaToken[iTemporal].estado))
											{
												listaArgumentos.Add(ListaToken[iTemporal].lexema);
											}
											else if (ListaToken[iTemporal].estado == -5)
											{
												listaArgumentos.Add("STRING.");
												iTemporal += 1;
											}
											iTemporal++;
										}
										Boolean invocacionValida = ts.InvocacionValida(nuevaClase, nombreMetodo, ListaToken[i].lexema, listaArgumentos);
										if (!invocacionValida)
										{
											//Error Semantico la invocacion ListaTokens[i].lexema no tiene los parametros correctos, tomar linea.
										}
										i = iTemporal + 1;
									}
								}

								if (ListaToken[i].lexema == "cout")
								{
									int iTemp = i;
									while (ListaToken[iTemp].estado == -17)
									{
										iTemp++;
									}
									//List<Token> miListaTemporal = ListaToken.GetRange()
								}

								if (ListaToken[i].lexema == "}")
								{
									terminacionMetodo = true;
								}
								i++;
							}
						}

						if (ListaToken[i].lexema  == "}")
						{
							//insertar nodo clase
							terminacionClase = true;
						}
						else
						{
							i++;
						}

					}


				}


			}
			ts = ts;
			return true;
		}

		private Regreso conversionLexemaRegreso(string lexema)
		{
			switch (lexema)
			{
				case "int":
					return Regreso.Int;
				case "float":
					return Regreso.Float;
				case "string":
					return Regreso.String;
				case "char":
					return Regreso.Char;
				case "bool":
					return Regreso.Bool;
				case "void":
					return Regreso.Void;
				case ":":
					return Regreso.Void;
				default:
					return Regreso.Void; //cambiar por error semantico return invalido
			}
		}

		private Alcance conversionoLexemaAlcance(string lexema)
		{
			switch (lexema)
			{
				case "public":
					return Alcance.Public;
				case "private":
					return Alcance.Private;
				case "protected":
					return Alcance.Protected;
				default:
					return Alcance.Private;
			}
		}

		public TipoDato conversionLexemaTipo(string lexema)
		{
			
			switch (lexema)
			{
				case "int":
					 return TipoDato.Int;
						
				case "float":
					 return TipoDato.Float;
					
				case "string":
					 return TipoDato.String;
					
				case "char":
					 return TipoDato.Char;
					
				case "bool":
					return TipoDato.Boolean;
				default:
					return TipoDato.NADA;
					
			}
			
		}

		public NodoClase encontrarClase(List<NodoClase> listaClases, string lexema)
		{
			foreach (var clase in listaClases)
			{
				if (clase.Lexema == lexema)
				{
					return clase;
				}
			}
			return null;
		}

		#region Metodos Sintatico

		void InsertarRegla(int FilaRegla)
		{
			MisReglas.RemoveAt(MisReglas.Count - 1);
			for (int i = 0; MR[FilaRegla, i] != -999; i++)
			{
				MisReglas.Add(MR[FilaRegla, i]);
			}
		}

		int BuscarColumna(int columna)
		{
			switch (columna)
			{
				case -1: columna = 0; break; //Enteros
				case -2: columna = 1; break; //Decimales
				case -3: columna = 2; break; // .
				case -4: columna = 3; break; //IDs
				case -5: columna = 4; break; //Cadena
				case -6: columna = 5; break; //Caracter
				case -7: columna = 6; break; // &&
				case -8: columna = 7; break; // ||
				case -9: columna = 8; break; // !=
				case -10: columna = 9; break; // =
				case -11: columna = 10; break; // ==
				case -12: columna = 11; break; // <
				case -13: columna = 12; break; // <=
				case -14: columna = 13; break; // <<
				case -15: columna = 14; break; // >
				case -16: columna = 15; break; // >=
				case -17: columna = 16; break; // >>
				case -18: columna = 17; break; // %
				case -19: columna = 18; break; // %=
				case -20: columna = 19; break; // :
				case -28: columna = 20; break; // #
				case -29: columna = 21; break; // ##
				case -21: columna = 22; break; // [
				case -22: columna = 23; break; // ]
				case -23: columna = 24; break; // (
				case -24: columna = 25; break; // )
				case -25: columna = 26; break; // {
				case -26: columna = 27; break; // }
				case -27: columna = 28; break; // ;
				case -30: columna = 29; break; // ,
				case -31: columna = 30; break; // *
				case -32: columna = 31; break; // *=
				case -33: columna = 32; break; // -
				case -34: columna = 33; break; // -=
				case -35: columna = 34; break; // --
				case -36: columna = 35; break; // +
				case -37: columna = 36; break; // +=
				case -38: columna = 37; break; // ++
				case -39: columna = 38; break; // /
				case -40: columna = 39; break; // /=
				case -101: columna = 40; break; // asm
				case -102: columna = 41; break; // auto
				case -103: columna = 42; break; // bool
				case -104: columna = 43; break; // break
				case -105: columna = 44; break; // case
				case -106: columna = 45; break; // catch
				case -107: columna = 46; break; // char
				case -108: columna = 47; break; // class
				case -109: columna = 48; break; // const
				case -110: columna = 49; break; // continue
				case -111: columna = 50; break; // default
				case -112: columna = 51; break; // delete
				case -113: columna = 52; break; // do
				case -114: columna = 53; break; // double
				case -115: columna = 54; break; // else
				case -116: columna = 55; break; // enum
				case -117: columna = 56; break; // explicit
				case -118: columna = 57; break; // extern
				case -119: columna = 58; break; // false
				case -120: columna = 59; break; // float
				case -121: columna = 60; break; // for
				case -122: columna = 61; break; // friend
				case -123: columna = 62; break; // goto
				case -124: columna = 63; break; // if
				case -125: columna = 64; break; // inline
				case -126: columna = 65; break; // int
				case -127: columna = 66; break; // long
				case -128: columna = 67; break; // mutable
				case -129: columna = 68; break; // namespace
				case -130: columna = 69; break; // new
				case -131: columna = 70; break; // operator
				case -132: columna = 71; break; // private
				case -133: columna = 72; break; // protected
				case -134: columna = 73; break; // public
				case -135: columna = 74; break; // register
				case -136: columna = 75; break; // return
				case -137: columna = 76; break; // short
				case -138: columna = 77; break; // signed
				case -139: columna = 78; break; // sizeof
				case -140: columna = 79; break; // static
				case -141: columna = 80; break; // struc
				case -142: columna = 81; break; // switch
				case -143: columna = 82; break; // template
				case -144: columna = 83; break; // this
				case -145: columna = 84; break; // throw
				case -146: columna = 85; break; // true
				case -147: columna = 86; break; // try
				case -148: columna = 87; break; // typedef
				case -149: columna = 88; break; // typename
				case -150: columna = 89; break; // union
				case -151: columna = 90; break; // unsigned
				case -152: columna = 91; break; // using
				case -153: columna = 92; break; // virtual
				case -154: columna = 93; break; // void
				case -155: columna = 94; break; // volatile
				case -156: columna = 95; break; // while
				case -157: columna = 96; break; // abstract
				case -158: columna = 97; break; // cout
				case -159: columna = 98; break; // include
				case -160: columna = 99; break; // string
				case -161: columna = 100; break; // iostream
				case -162: columna = 101; break; // mathe
				case -163: columna = 102; break; // endl
				case -164: columna = 103; break; // finally
				case -165: columna = 104; break; // cin
				case -80: columna = 105; break; // LEOF ¥
			}
			return columna;
		}

		int BuscarRenglon(int renglon)
		{
			return renglon - 1000;
		}

		string BuscarToken(int columna)
		{
			string Token = "";
			switch (columna)
			{
				case -1: Token = "Enteros"; break; //Enteros
				case -2: Token = "Decimales"; break; //Decimales
				case -3: Token = "."; break; // .
				case -4: Token = "Identificador"; break; //IDs
				case -5: Token = "Cadena"; break; //Cadena
				case -6: Token = "Caracter"; break; //Caracter
				case -7: Token = "&&"; break; // &&
				case -8: Token = "||"; break; // ||
				case -9: Token = "!="; break; // !=
				case -10: Token = "="; break; // =
				case -11: Token = "=="; break; // ==
				case -12: Token = "<"; break; // <
				case -13: Token = "<="; break; // <=
				case -14: Token = "<<"; break; // <<
				case -15: Token = ">"; break; // >
				case -16: Token = ">="; break; // >=
				case -17: Token = ">>"; break; // >>
				case -18: Token = "%"; break; // %
				case -19: Token = "%="; break; // %=
				case -20: Token = ":"; break; // :
				case -28: Token = "#"; break; // #
				case -29: Token = "##"; break; // ##
				case -21: Token = "["; break; // [
				case -22: Token = "]"; break; // ]
				case -23: Token = "("; break; // (
				case -24: Token = ")"; break; // )
				case -25: Token = "{"; break; // {
				case -26: Token = "}"; break; // }
				case -27: Token = ";"; break; // ;
				case -30: Token = ","; break; // ,
				case -31: Token = "*"; break; // *
				case -32: Token = "*="; break; // *=
				case -33: Token = "-"; break; // -
				case -34: Token = "-="; break; // -=
				case -35: Token = "--"; break; // --
				case -36: Token = "+"; break; // +
				case -37: Token = "+="; break; // +=
				case -38: Token = "++"; break; // ++
				case -39: Token = "/"; break; // /
				case -40: Token = "/="; break; // /=
				case -101: Token = "asm"; break; // asm
				case -102: Token = "auto"; break; // auto
				case -103: Token = "bool"; break; // bool
				case -104: Token = "break"; break; // break
				case -105: Token = "case"; break; // case
				case -106: Token = "catch"; break; // catch
				case -107: Token = "char"; break; // char
				case -108: Token = "class"; break; // class
				case -109: Token = "const"; break; // const
				case -110: Token = "continue"; break; // continue
				case -111: Token = "default"; break; // default
				case -112: Token = "delete"; break; // delete
				case -113: Token = "do"; break; // do
				case -114: Token = "double"; break; // double
				case -115: Token = "else"; break; // else
				case -116: Token = "enum"; break; // enum
				case -117: Token = "explicit"; break; // explicit
				case -118: Token = "extern"; break; // extern
				case -119: Token = "false"; break; // false
				case -120: Token = "float"; break; // float
				case -121: Token = "for"; break; // for
				case -122: Token = "friend"; break; // friend
				case -123: Token = "goto"; break; // goto
				case -124: Token = "if"; break; // if
				case -125: Token = "inline"; break; // inline
				case -126: Token = "int"; break; // int
				case -127: Token = "long"; break; // long
				case -128: Token = "mutable"; break; // mutable
				case -129: Token = "namespace"; break; // namespace
				case -130: Token = "new"; break; // new
				case -131: Token = "operator"; break; // operator
				case -132: Token = "private"; break; // private
				case -133: Token = "protected"; break; // protected
				case -134: Token = "public"; break; // public
				case -135: Token = "register"; break; // register
				case -136: Token = "return"; break; // return
				case -137: Token = "short"; break; // short
				case -138: Token = "signed"; break; // signed
				case -139: Token = "sizeof"; break; // sizeof
				case -140: Token = "static"; break; // static
				case -141: Token = "struc"; break; // struc
				case -142: Token = "switch"; break; // switch
				case -143: Token = "template"; break; // template
				case -144: Token = "this"; break; // this
				case -145: Token = "throw"; break; // throw
				case -146: Token = "true"; break; // true
				case -147: Token = "try"; break; // try
				case -148: Token = "typedef"; break; // typedef
				case -149: Token = "typename"; break; // typename
				case -150: Token = "union"; break; // union
				case -151: Token = "unsigned"; break; // unsigned
				case -152: Token = "using"; break; // using
				case -153: Token = "virtual"; break; // virtual
				case -154: Token = "void"; break; // void
				case -155: Token = "volatile"; break; // volatile
				case -156: Token = "while"; break; // while
				case -157: Token = "abstract"; break; // abstract
				case -158: Token = "cout"; break; // cout
				case -159: Token = "include"; break; // include
				case -160: Token = "string"; break; // string
				case -161: Token = "iostream"; break; // iostream
				case -162: Token = "mathe"; break; // mathe
				case -163: Token = "endl"; break; // endl
				case -164: Token = "finally"; break; // finally
				case -165: Token = "cin"; break; // cin
				case -80: Token = "LEOF"; break; // LEOF ¥
			}
			return Token;
		}

		string BuscarSimbolo(int columna)
		{
			string Simbolo = "";
			switch (columna)
			{
				case 0: Simbolo = "Entero"; break;
				case 1: Simbolo = "Decimal"; break;
				case 2: Simbolo = "."; break;
				case 3: Simbolo = "ID"; break;
				case 4: Simbolo = "Cadena"; break;
				case 5: Simbolo = "Caracter"; break;
				case 6: Simbolo = "&&"; break;
				case 7: Simbolo = "||"; break;
				case 8: Simbolo = "!="; break;
				case 9: Simbolo = "="; break;
				case 10: Simbolo = "=="; break;
				case 11: Simbolo = "<"; break;
				case 12: Simbolo = "<="; break;
				case 13: Simbolo = "<<"; break;
				case 14: Simbolo = ">"; break;
				case 15: Simbolo = ">="; break;
				case 16: Simbolo = ">>"; break;
				case 17: Simbolo = "%"; break;
				case 18: Simbolo = "%="; break;
				case 19: Simbolo = ":"; break;
				case 20: Simbolo = "#"; break;
				case 21: Simbolo = "##"; break;
				case 22: Simbolo = "["; break;
				case 23: Simbolo = "]"; break;
				case 24: Simbolo = "("; break;
				case 25: Simbolo = ")"; break;
				case 26: Simbolo = "{"; break;
				case 27: Simbolo = "}"; break;
				case 28: Simbolo = ";"; break;
				case 29: Simbolo = ","; break;
				case 30: Simbolo = "*"; break;
				case 31: Simbolo = "*="; break;
				case 32: Simbolo = "-"; break;
				case 33: Simbolo = "-="; break;
				case 34: Simbolo = "--"; break;
				case 35: Simbolo = "+"; break;
				case 36: Simbolo = "+="; break;
				case 37: Simbolo = "++"; break;
				case 38: Simbolo = "/"; break;
				case 39: Simbolo = "/="; break;
				case 40: Simbolo = "asm"; break;
				case 41: Simbolo = "auto"; break;
				case 42: Simbolo = "bool"; break;
				case 43: Simbolo = "break"; break;
				case 44: Simbolo = "case"; break;
				case 45: Simbolo = "catch"; break;
				case 46: Simbolo = "char"; break;
				case 47: Simbolo = "class"; break;
				case 48: Simbolo = "const"; break;
				case 49: Simbolo = "continue"; break;
				case 50: Simbolo = "default"; break;
				case 51: Simbolo = "delete"; break;
				case 52: Simbolo = "do"; break;
				case 53: Simbolo = "double"; break;
				case 54: Simbolo = "else"; break;
				case 55: Simbolo = "enum"; break;
				case 56: Simbolo = "explicit"; break;
				case 57: Simbolo = "extern"; break;
				case 58: Simbolo = "false"; break;
				case 59: Simbolo = "float"; break;
				case 60: Simbolo = "for"; break;
				case 61: Simbolo = "friend"; break;
				case 62: Simbolo = "goto"; break;
				case 63: Simbolo = "if"; break;
				case 64: Simbolo = "inline"; break;
				case 65: Simbolo = "int"; break;
				case 66: Simbolo = "long"; break;
				case 67: Simbolo = "mutable"; break;
				case 68: Simbolo = "namespace"; break;
				case 69: Simbolo = "new"; break;
				case 70: Simbolo = "operator"; break;
				case 71: Simbolo = "private"; break;
				case 72: Simbolo = "protected"; break;
				case 73: Simbolo = "public"; break;
				case 74: Simbolo = "register"; break;
				case 75: Simbolo = "return"; break;
				case 76: Simbolo = "short"; break;
				case 77: Simbolo = "signed"; break;
				case 78: Simbolo = "sizeof"; break;
				case 79: Simbolo = "static"; break;
				case 80: Simbolo = "struc"; break;
				case 81: Simbolo = "switch"; break;
				case 82: Simbolo = "template"; break;
				case 83: Simbolo = "this"; break;
				case 84: Simbolo = "throw"; break;
				case 85: Simbolo = "true"; break;
				case 86: Simbolo = "try"; break;
				case 87: Simbolo = "typedef"; break;
				case 88: Simbolo = "typename"; break;
				case 89: Simbolo = "union"; break;
				case 90: Simbolo = "unsigned"; break;
				case 91: Simbolo = "using"; break;
				case 92: Simbolo = "virtual"; break;
				case 93: Simbolo = "void"; break;
				case 94: Simbolo = "volatile"; break;
				case 95: Simbolo = "while"; break;
				case 96: Simbolo = "abstract"; break;
				case 97: Simbolo = "cout"; break;
				case 98: Simbolo = "include"; break;
				case 99: Simbolo = "string"; break;
				case 100: Simbolo = "iostream"; break;
				case 101: Simbolo = "mathe"; break;
				case 102: Simbolo = "endl"; break;
				case 103: Simbolo = "finally"; break;
				case 104: Simbolo = "cin"; break;
				case 105: Simbolo = "LEOF"; break;
			}
			return Simbolo;
		}

		void ManejarError(int ReglaEsperada, int lineaToken)
		{
			retorno += "Analisis entorpecido en Token: " + (Cola + 1) + ".";
			if (ReglaEsperada < -100)
			{
				retorno += " Se esperaba la palabra reservada : ";
			}
			else
			{
				retorno += " Se esperaba  un: ";
			}

			if (ReglaEsperada < 1000)
			{
				retorno += BuscarToken(ReglaEsperada);
				ErroresSintacticos.Add(new Error(retorno, lineaToken, "-450"));
				retorno = "";
				Cola++;
				return;
			}

			Renglon = BuscarRenglon(ReglaEsperada);
			//Revisa todas las columnas de la segunda matriz
			for (int i = 0; i <= 105; i++) //105 se refiere al numero de columnas de la 2da matriz de Sintactico
			{
				if (MTS[Renglon, i] >= 0)
				{
					retorno += BuscarSimbolo(i) + " ó  un ";
				}
			}
			retorno = retorno.Substring(0, retorno.Length - 6);

			ErroresSintacticos.Add(new Error(retorno, lineaToken, "-450"));
			retorno = "";


		}

		#endregion

	}

	public class Error
	{
		public string Descripcion;
		public int linea;
		public string tipo;
		public Error(string Descripcion, int linea, string tipo)
		{
			this.Descripcion = Descripcion;
			this.linea = linea;
			this.tipo = tipo;
		}	
	}

}
